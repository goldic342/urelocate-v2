import random
from src.probability.models import UserData


class AdvicesService:
    def generate_advice(self, user_data: UserData, advices_count: int = 2) -> list[str]:
        """
        Generates a list of random advices based on user data.
        """
        advices = []

        if user_data.expirience_level < 3:
            experience_advices = [
                "Повышайте уровень опыта в своей области. Рассмотрите возможность участия в профессиональных курсах или проектах.",
                "Создайте портфолио или завершите сертификационные программы, чтобы повысить доверие работодателей.",
                "Ищите наставников, которые могут помочь вам в карьерном росте.",
                "Участвуйте в волонтерских проектах для получения практического опыта.",
            ]
            advices.append(random.choice(experience_advices))

        if user_data.local_lang_level < 2:
            local_lang_advices = [
                "Изучайте местный язык, чтобы упростить адаптацию и интеграцию в новое общество.",
                "Посетите языковые курсы или используйте приложения для изучения языка.",
                "Практикуйте язык через разговоры с носителями языка.",
                "Смотрите фильмы или слушайте музыку на местном языке, чтобы улучшить понимание.",
            ]
            advices.append(random.choice(local_lang_advices))

        if user_data.english_level < 2:
            english_advices = [
                "Улучшайте знание английского языка, это поможет вам в профессиональной и повседневной жизни.",
                "Практикуйте английский язык через разговорные клубы или чтение специализированной литературы.",
                "Изучайте английский с помощью онлайн-курсов и видеоуроков.",
                "Используйте приложения для изучения английского языка, такие как Duolingo или LingQ.",
            ]
            advices.append(random.choice(english_advices))

        if user_data.savings < 10000:
            savings_advices = [
                "Попробуйте увеличить свои сбережения перед переездом, чтобы чувствовать себя увереннее в новой стране.",
                "Рассмотрите возможность временной подработки или оптимизации расходов для увеличения сбережений.",
                "Создайте финансовый план для более эффективного накопления средств.",
                "Изучите доступные гранты или субсидии, которые могут помочь покрыть расходы.",
            ]
            advices.append(random.choice(savings_advices))

        if len(user_data.tech_stack.tools) < 3:
            tech_stack_advices = [
                "Расширьте свой технический стек. Добавьте новые инструменты и технологии, чтобы повысить вашу конкурентоспособность.",
                "Освойте технологии, популярные на рынке вашей целевой страны, чтобы повысить шансы на трудоустройство.",
                "Посетите хакатоны или онлайн-курсы для освоения новых технологий.",
                "Читайте технические блоги и участвуйте в профессиональных сообществах для изучения новых инструментов.",
            ]
            advices.append(random.choice(tech_stack_advices))

        if user_data.dependents.children > 0:
            children_advices = [
                "Учитывайте потребности ваших детей при планировании переезда, включая школы и досуг.",
                "Изучите образовательные и медицинские учреждения для детей в вашей целевой стране.",
                "Узнайте о кружках и секциях для детей в районе вашего будущего проживания.",
                "Составьте список необходимых документов для записи детей в школы или детские сады.",
            ]
            advices.append(random.choice(children_advices))

        if user_data.dependents.adults > 1:
            adults_advices = [
                "Учтите дополнительные расходы на взрослых членов семьи при планировании бюджета.",
                "Рассмотрите возможность поиска работы или получения социальных льгот для взрослых членов семьи.",
                "Изучите программы интеграции или обучения для взрослых членов семьи.",
                "Запланируйте время на адаптацию и поддержку членов семьи.",
            ]
            advices.append(random.choice(adults_advices))

        # Limit the number of advices to the requested count
        return random.sample(advices, min(len(advices), advices_count))
